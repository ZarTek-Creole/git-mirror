name: Code Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  coverage:
    name: Coverage Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache ShellSpec
      id: cache-shellspec
      uses: actions/cache@v4
      with:
        path: |
          ~/.local/share/shellspec
          bin
        key: ${{ runner.os }}-shellspec-0.28.1
        restore-keys: |
          ${{ runner.os }}-shellspec-

    - name: Setup shellspec
      run: |
        if [ ! -f bin/shellspec ]; then
          curl -fsSL https://git.io/shellspec | sh -s -- --yes
        else
          echo "✅ ShellSpec already installed (cached)"
        fi
        echo "$PWD/bin" >> $GITHUB_PATH

    - name: Cache kcov
      id: cache-kcov
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/kcov
          /usr/local/bin/kcov
        key: ${{ runner.os }}-kcov-v38
        restore-keys: |
          ${{ runner.os }}-kcov-

    - name: Install kcov
      if: steps.cache-kcov.outputs.cache-hit != 'true'
      run: |
        echo "Building kcov..."
        sudo apt-get update
        sudo apt-get install -y libcurl4-openssl-dev libelf-dev libdw-dev cmake gcc binutils-dev
        wget -q https://github.com/SimonKagstrom/kcov/archive/v38.tar.gz
        tar xzf v38.tar.gz
        cd kcov-38
        mkdir build && cd build
        cmake ..
        make -j$(nproc)
        sudo make install
        echo "✅ kcov v38 installed"

    - name: Run tests with coverage
      run: |
        mkdir -p coverage/html
        shellspec --kcov \
          --kcov-options="--include-pattern=lib/*/*.sh" \
          --kcov-options="--exclude-pattern=test" \
          --kcov-options="--exclude-path=/usr,/sys,/proc,/dev,/tmp" \
          --kcov-options="--html" \
          --kcov-options="--merge" \
          --kcov-options="$PWD/coverage/html" \
          tests/spec/

    - name: Generate coverage report
      run: |
        echo "Coverage report generated"
        ls -lh coverage/html/
        
        # Créer un résumé JSON simple pour Codecov
        mkdir -p coverage
        cat > coverage/report.json << 'EOF'
        {
          "coverage_percent": "$(find coverage/html -name '*.json' -exec cat {} \; | grep -oP 'covered_percent":\s*\K\d+' | head -1 || echo '0')",
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "threshold": 80
        }
        EOF
        cat coverage/report.json

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage/report.json
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
        verbose: true

    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-html-report
        path: coverage/html/
        retention-days: 30
        compression-level: 6

