
In git-mirror.sh line 21:
source "$LIB_DIR/logging/logger.sh"
       ^--------------------------^ SC1091 (info): Not following: ./logging/logger.sh: openBinaryFile: does not exist (No such file or directory)


In git-mirror.sh line 22:
source "$CONFIG_DIR/config.sh"
       ^---------------------^ SC1091 (info): Not following: ./config.sh: openBinaryFile: does not exist (No such file or directory)


In git-mirror.sh line 23:
source "$LIB_DIR/auth/auth.sh"
       ^---------------------^ SC1091 (info): Not following: ./auth/auth.sh: openBinaryFile: does not exist (No such file or directory)


In git-mirror.sh line 24:
source "$LIB_DIR/api/github_api.sh"
       ^--------------------------^ SC1091 (info): Not following: ./api/github_api.sh: openBinaryFile: does not exist (No such file or directory)


In git-mirror.sh line 25:
source "$LIB_DIR/validation/validation.sh"
       ^-- SC1091 (info): Not following: ./validation/validation.sh: openBinaryFile: does not exist (No such file or directory)


In git-mirror.sh line 26:
source "$LIB_DIR/git/git_ops.sh"
       ^-----------------------^ SC1091 (info): Not following: ./git/git_ops.sh: openBinaryFile: does not exist (No such file or directory)


In git-mirror.sh line 27:
source "$LIB_DIR/cache/cache.sh"
       ^-----------------------^ SC1091 (info): Not following: ./cache/cache.sh: openBinaryFile: does not exist (No such file or directory)


In git-mirror.sh line 28:
source "$LIB_DIR/parallel/parallel.sh"
       ^-----------------------------^ SC1091 (info): Not following: ./parallel/parallel.sh: openBinaryFile: does not exist (No such file or directory)


In git-mirror.sh line 29:
source "$LIB_DIR/filters/filters.sh"
       ^---------------------------^ SC1091 (info): Not following: ./filters/filters.sh: openBinaryFile: does not exist (No such file or directory)


In git-mirror.sh line 30:
source "$LIB_DIR/metrics/metrics.sh"
       ^---------------------------^ SC1091 (info): Not following: ./metrics/metrics.sh: openBinaryFile: does not exist (No such file or directory)


In git-mirror.sh line 31:
source "$LIB_DIR/interactive/interactive.sh"
       ^-- SC1091 (info): Not following: ./interactive/interactive.sh: openBinaryFile: does not exist (No such file or directory)


In git-mirror.sh line 32:
source "$LIB_DIR/state/state.sh"
       ^-----------------------^ SC1091 (info): Not following: ./state/state.sh: openBinaryFile: does not exist (No such file or directory)


In git-mirror.sh line 33:
source "$LIB_DIR/incremental/incremental.sh"
       ^-- SC1091 (info): Not following: ./incremental/incremental.sh: openBinaryFile: does not exist (No such file or directory)


In git-mirror.sh line 34:
source "$LIB_DIR/utils/profiling.sh"
       ^---------------------------^ SC1091 (info): Not following: ./utils/profiling.sh: openBinaryFile: does not exist (No such file or directory)


In git-mirror.sh line 280:
                EXCLUDE_FILE="$2"
                ^----------^ SC2034 (warning): EXCLUDE_FILE appears unused. Verify use (or export if used externally).


In git-mirror.sh line 294:
                INCLUDE_FILE="$2"
                ^----------^ SC2034 (warning): INCLUDE_FILE appears unused. Verify use (or export if used externally).


In git-mirror.sh line 306:
                INTERACTIVE_MODE=true
                ^--------------^ SC2034 (warning): INTERACTIVE_MODE appears unused. Verify use (or export if used externally).


In git-mirror.sh line 310:
                CONFIRM_MODE=true
                ^----------^ SC2034 (warning): CONFIRM_MODE appears unused. Verify use (or export if used externally).


In git-mirror.sh line 314:
                AUTO_YES=true
                ^------^ SC2034 (warning): AUTO_YES appears unused. Verify use (or export if used externally).


In git-mirror.sh line 403:
        export GITHUB_TOKEN=$(echo "$GITHUB_TOKEN" | tr -d '[:space:]')
               ^----------^ SC2155 (warning): Declare and assign separately to avoid masking return values.


In git-mirror.sh line 411:
        if [ $? -eq 0 ] && [ -n "$gh_token" ]; then
             ^-- SC2181 (style): Check exit code directly with e.g. 'if mycmd;', not indirectly with $?.


In git-mirror.sh line 412:
            export GITHUB_TOKEN=$(echo "$gh_token" | tr -d '[:space:]')
                   ^----------^ SC2155 (warning): Declare and assign separately to avoid masking return values.


In git-mirror.sh line 519:
    auth_headers=$(auth_get_headers "$GITHUB_AUTH_METHOD")
    ^----------^ SC2034 (warning): auth_headers appears unused. Verify use (or export if used externally).


In git-mirror.sh line 624:
            local verbose_level="${VERBOSE_LEVEL:-0}"
            ^-- SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).
                  ^-----------^ SC2034 (warning): verbose_level appears unused. Verify use (or export if used externally).


In git-mirror.sh line 625:
            local quiet_mode="${QUIET_MODE:-false}"
            ^-- SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).
                  ^--------^ SC2034 (warning): quiet_mode appears unused. Verify use (or export if used externally).


In git-mirror.sh line 626:
            local filter_enabled="${FILTER_ENABLED:-false}"
            ^-- SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In git-mirror.sh line 627:
            local github_auth="${GITHUB_AUTH_METHOD:-public}"
            ^-- SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In git-mirror.sh line 629:
            local repo_url="$1"
            ^-----------------^ SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In git-mirror.sh line 630:
            local repo_name
            ^-------------^ SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In git-mirror.sh line 631:
            repo_name=$(basename "$repo_url" .git)
            ^-- SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).
                        ^-----------------------^ SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In git-mirror.sh line 632:
            local repo_full_name
            ^------------------^ SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In git-mirror.sh line 633:
            repo_full_name=$(echo "$repo_url" | sed 's|https://github.com/||' | sed 's|.git||')
            ^-- SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).
                             ^-- SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In git-mirror.sh line 636:
            if [ "$filter_enabled" = "true" ] && ! filters_should_process "$repo_name" "$repo_full_name"; then
            ^-- SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).
               ^-----------------------------^ SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).
                                                   ^-- SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In git-mirror.sh line 637:
                echo "FILTERED:$repo_name"
                ^------------------------^ SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In git-mirror.sh line 638:
                return 0
                ^------^ SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In git-mirror.sh line 642:
            local final_url
            ^-------------^ SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In git-mirror.sh line 643:
            if [ "$github_auth" = "ssh" ]; then
            ^-- SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).
               ^------------------------^ SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In git-mirror.sh line 644:
                final_url=$(auth_transform_url "$repo_url" "ssh")
                ^-- SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).
                            ^-- SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In git-mirror.sh line 646:
                final_url="$repo_url"
                ^-------------------^ SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In git-mirror.sh line 649:
            local repo_path="$DEST_DIR/$repo_name"
            ^-- SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In git-mirror.sh line 651:
            if repository_exists "$repo_path"; then
            ^-- SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).
               ^----------------------------^ SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In git-mirror.sh line 652:
                if update_repository "$repo_path" "$BRANCH"; then
                ^-- SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).
                   ^-- SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In git-mirror.sh line 653:
                    echo "SUCCESS:$repo_name"
                    ^-----------------------^ SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In git-mirror.sh line 655:
                    echo "FAILED:$repo_name"
                    ^----------------------^ SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In git-mirror.sh line 658:
                if clone_repository "$final_url" "$DEST_DIR" "$BRANCH" "$DEPTH" "$FILTER" "$SINGLE_BRANCH" "$NO_CHECKOUT"; then
                ^-- SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).
                   ^-- SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In git-mirror.sh line 659:
                    echo "SUCCESS:$repo_name"
                    ^-----------------------^ SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In git-mirror.sh line 661:
                    echo "FAILED:$repo_name"
                    ^----------------------^ SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In config/config.sh line 61:
PARALLEL_ENABLED=false
^--------------^ SC2034 (warning): PARALLEL_ENABLED appears unused. Verify use (or export if used externally).


In config/config.sh line 62:
FILTER_ENABLED=false
^------------^ SC2034 (warning): FILTER_ENABLED appears unused. Verify use (or export if used externally).


In config/config.sh line 63:
METRICS_ENABLED=false
^-------------^ SC2034 (warning): METRICS_ENABLED appears unused. Verify use (or export if used externally).


In config/config.sh line 64:
EXCLUDE_PATTERNS=()
^--------------^ SC2034 (warning): EXCLUDE_PATTERNS appears unused. Verify use (or export if used externally).


In config/config.sh line 65:
INCLUDE_PATTERNS=()
^--------------^ SC2034 (warning): INCLUDE_PATTERNS appears unused. Verify use (or export if used externally).


In config/config.sh line 66:
EXCLUDE_FILE=""
^----------^ SC2034 (warning): EXCLUDE_FILE appears unused. Verify use (or export if used externally).


In config/config.sh line 67:
INCLUDE_FILE=""
^----------^ SC2034 (warning): INCLUDE_FILE appears unused. Verify use (or export if used externally).


In config/config.sh line 68:
INTERACTIVE_MODE=false
^--------------^ SC2034 (warning): INTERACTIVE_MODE appears unused. Verify use (or export if used externally).


In config/config.sh line 69:
CONFIRM_MODE=false
^----------^ SC2034 (warning): CONFIRM_MODE appears unused. Verify use (or export if used externally).


In config/config.sh line 70:
AUTO_YES=false
^------^ SC2034 (warning): AUTO_YES appears unused. Verify use (or export if used externally).


In lib/api/github_api.sh line 27:
    if [ $? -ne 0 ]; then
         ^-- SC2181 (style): Check exit code directly with e.g. 'if ! mycmd;', not indirectly with $?.


In lib/api/github_api.sh line 67:
    if [ $? -ne 0 ]; then
         ^-- SC2181 (style): Check exit code directly with e.g. 'if ! mycmd;', not indirectly with $?.


In lib/api/github_api.sh line 259:
        if [ $? -ne 0 ]; then
             ^-- SC2181 (style): Check exit code directly with e.g. 'if ! mycmd;', not indirectly with $?.


In lib/api/github_api.sh line 304:
            log_debug "Avant fusion - all_repos: $(cat "$temp_file1" | jq 'length'), response: $(cat "$temp_file2" | jq 'length')"
                                                       ^-----------^ SC2002 (style): Useless cat. Consider 'cmd < file | ..' or 'cmd file | ..' instead.
                                                                                                     ^-----------^ SC2002 (style): Useless cat. Consider 'cmd < file | ..' or 'cmd file | ..' instead.


In lib/api/github_api.sh line 362:
    if [ $? -ne 0 ]; then
         ^-- SC2181 (style): Check exit code directly with e.g. 'if ! mycmd;', not indirectly with $?.


In lib/api/github_api.sh line 400:
    if [ $? -ne 0 ]; then
         ^-- SC2181 (style): Check exit code directly with e.g. 'if ! mycmd;', not indirectly with $?.


In lib/auth/auth.sh line 89:
    if [ $? -ne 0 ]; then
         ^-- SC2181 (style): Check exit code directly with e.g. 'if ! mycmd;', not indirectly with $?.


In lib/auth/auth.sh line 175:
    if [ $? -ne 0 ] || [ -z "$method" ]; then
         ^-- SC2181 (style): Check exit code directly with e.g. 'if ! mycmd;', not indirectly with $?.


In lib/auth/auth.sh line 210:
    if [ $? -ne 0 ]; then
         ^-- SC2181 (style): Check exit code directly with e.g. 'if ! mycmd;', not indirectly with $?.


In lib/filters/filters.sh line 108:
        if [[ "$name" == $pattern ]]; then
                         ^------^ SC2053 (warning): Quote the right-hand side of == in [[ ]] to prevent glob matching.


In lib/filters/filters.sh line 157:
            filtered_repos=$(echo "$filtered_repos" | jq ". + [$repo]")
            ^------------^ SC2030 (info): Modification of filtered_repos is local (to subshell caused by pipeline).


In lib/filters/filters.sh line 158:
            filtered_count=$((filtered_count + 1))
            ^------------^ SC2030 (info): Modification of filtered_count is local (to subshell caused by pipeline).


In lib/filters/filters.sh line 162:
    log_success "Filtrage terminé: $filtered_count/$total_count dépôts conservés"
                                   ^-------------^ SC2031 (info): filtered_count was modified in a subshell. That change might be lost.


In lib/filters/filters.sh line 164:
    echo "$filtered_repos"
          ^-------------^ SC2031 (info): filtered_repos was modified in a subshell. That change might be lost.


In lib/filters/filters.sh line 246:
        if ! [[ "test" == $pattern ]]; then
                          ^------^ SC2053 (warning): Quote the right-hand side of == in [[ ]] to prevent glob matching.


In lib/filters/filters.sh line 258:
    if [ $? -ne 0 ]; then
         ^-- SC2181 (style): Check exit code directly with e.g. 'if ! mycmd;', not indirectly with $?.


In lib/incremental/incremental.sh line 71:
    if [ $? -ne 0 ]; then
         ^-- SC2181 (style): Check exit code directly with e.g. 'if ! mycmd;', not indirectly with $?.


In lib/incremental/incremental.sh line 96:
        if [ $? -eq 0 ] && [ "$pushed_timestamp" -gt "$last_sync_timestamp" ]; then
             ^-- SC2181 (style): Check exit code directly with e.g. 'if mycmd;', not indirectly with $?.


In lib/incremental/incremental.sh line 97:
            filtered_repos=$(echo "$filtered_repos" | jq ". + [$repo]")
            ^------------^ SC2030 (info): Modification of filtered_repos is local (to subshell caused by pipeline).


In lib/incremental/incremental.sh line 98:
            updated_count=$((updated_count + 1))
            ^-----------^ SC2030 (info): Modification of updated_count is local (to subshell caused by pipeline).


In lib/incremental/incremental.sh line 103:
    log_success "Filtrage incrémental terminé: $updated_count/$total_count dépôts modifiés"
                                               ^------------^ SC2031 (info): updated_count was modified in a subshell. That change might be lost.


In lib/incremental/incremental.sh line 105:
    echo "$filtered_repos"
          ^-------------^ SC2031 (info): filtered_repos was modified in a subshell. That change might be lost.


In lib/incremental/incremental.sh line 126:
    if [ $? -ne 0 ] || [ -z "$pushed_timestamp" ] || [ -z "$last_sync_timestamp" ]; then
         ^-- SC2181 (style): Check exit code directly with e.g. 'if ! mycmd;', not indirectly with $?.


In lib/incremental/incremental.sh line 195:
    if [ $? -ne 0 ]; then
         ^-- SC2181 (style): Check exit code directly with e.g. 'if ! mycmd;', not indirectly with $?.


In lib/interactive/interactive.sh line 310:
    if [ $? -ne 0 ]; then
         ^-- SC2181 (style): Check exit code directly with e.g. 'if ! mycmd;', not indirectly with $?.


In lib/metrics/metrics.sh line 252:
    if [ $? -ne 0 ]; then
         ^-- SC2181 (style): Check exit code directly with e.g. 'if ! mycmd;', not indirectly with $?.


In lib/parallel/parallel.sh line 204:
    if [ $? -ne 0 ]; then
         ^-- SC2181 (style): Check exit code directly with e.g. 'if ! mycmd;', not indirectly with $?.


In lib/state/state.sh line 238:
    if [ $? -ne 0 ]; then
         ^-- SC2181 (style): Check exit code directly with e.g. 'if ! mycmd;', not indirectly with $?.


In lib/state/state.sh line 260:
    if [ $? -ne 0 ]; then
         ^-- SC2181 (style): Check exit code directly with e.g. 'if ! mycmd;', not indirectly with $?.


In lib/utils/profiling.sh line 29:
        local end_time=$(date +%s.%N)
              ^------^ SC2155 (warning): Declare and assign separately to avoid masking return values.


In lib/utils/profiling.sh line 30:
        local duration=$(echo "$end_time - $start_time" | bc -l)
              ^------^ SC2155 (warning): Declare and assign separately to avoid masking return values.


In lib/utils/profiling.sh line 37:
        unset PROFILING_TIMERS["$timer_name"]
              ^-----------------------------^ SC2184 (warning): Quote arguments to unset so they're not glob expanded.


In tests/integration/test_integration.sh line 9:
TEST_CACHE_DIR="$TEST_DIR/cache"
^------------^ SC2034 (warning): TEST_CACHE_DIR appears unused. Verify use (or export if used externally).


In tests/integration/test_integration.sh line 10:
TEST_STATE_DIR="$TEST_DIR/state"
^------------^ SC2034 (warning): TEST_STATE_DIR appears unused. Verify use (or export if used externally).


In tests/load/test_load.sh line 9:
LOAD_TEST_CACHE_DIR="$LOAD_TEST_DIR/cache"
^-----------------^ SC2034 (warning): LOAD_TEST_CACHE_DIR appears unused. Verify use (or export if used externally).


In tests/load/test_load.sh line 10:
LOAD_TEST_STATE_DIR="$LOAD_TEST_DIR/state"
^-----------------^ SC2034 (warning): LOAD_TEST_STATE_DIR appears unused. Verify use (or export if used externally).


In tests/utils/mock.sh line 23:
        local json_content
        ^----------------^ SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In tests/utils/mock.sh line 24:
        if [ -f "$mock_file" ]; then
        ^-- SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).
           ^-----------------^ SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In tests/utils/mock.sh line 25:
            json_content=$(cat "$mock_file")
            ^-- SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).
                           ^--------------^ SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In tests/utils/mock.sh line 27:
            json_content="{}"
            ^---------------^ SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In tests/utils/mock.sh line 29:
        echo "${json_content}${http_code}"
        ^-- SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In tests/utils/mock.sh line 30:
        return 0
        ^------^ SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In tests/utils/mock.sh line 40:
        echo "${json_content}${http_code}"
        ^-- SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In tests/utils/mock.sh line 41:
        return 0
        ^------^ SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In tests/utils/mock.sh line 49:
    local per_page="${3:-100}"
          ^------^ SC2034 (warning): per_page appears unused. Verify use (or export if used externally).


In tests/utils/mock.sh line 54:
        case "$*" in
        ^-- SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In tests/utils/mock.sh line 55:
            *"page=1"*|*"page=2"*|*page=1*)
            ^--------^ SC2221 (warning): This pattern always overrides a later one on line 55.
                                  ^------^ SC2222 (warning): This pattern never matches because of a previous pattern on line 55.


In tests/utils/mock.sh line 56:
                page_count=$((page_count + 1))
                ^----------------------------^ SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In tests/utils/mock.sh line 57:
                if [ "$page_count" -eq 1 ]; then
                ^-- SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).
                   ^---------------------^ SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In tests/utils/mock.sh line 58:
                    echo "${page1_json}200"
                    ^---------------------^ SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In tests/utils/mock.sh line 60:
                    echo "${page2_json}200"
                    ^---------------------^ SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In tests/utils/mock.sh line 64:
                echo "[]200"
                ^----------^ SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In tests/utils/mock.sh line 67:
        return 0
        ^------^ SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In tests/utils/mock.sh line 77:
        echo "{\"message\": \"${error_message}\"}${http_code}"
        ^-- SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In tests/utils/mock.sh line 78:
        return 0
        ^------^ SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In tests/utils/mock.sh line 85:
        echo ""
        ^-----^ SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).


In tests/utils/mock.sh line 86:
        return 1
        ^------^ SC2317 (info): Command appears to be unreachable. Check usage (or ignore if invoked indirectly).

For more information:
  https://www.shellcheck.net/wiki/SC2034 -- AUTO_YES appears unused. Verify u...
  https://www.shellcheck.net/wiki/SC2053 -- Quote the right-hand side of == i...
  https://www.shellcheck.net/wiki/SC2155 -- Declare and assign separately to ...
